        <button className="filter-btn" 
        onClick={() => 
          listOfResturants= listOfResturants.filter((res)=>res.card.card.info.avgRating  > 4 )
        }>Top Rated Resturants</button>


Explaining: The button now filters the list of restaurants to display only those with an average rating greater  than 4. 
            This is achieved by using the filter() method in JavaScript. The filtered list is assigned to the listOfResturants variable.
            Now how here filter works in our code:

    The filter() method creates a new array with all elements that pass the test implemented by the provided function. 
    In this case, the function checks if the average rating of a restaurant is greater than
    4. If a restaurant meets this condition, it is included in the new array. Otherwise, it is excluded.
    The filtered list is then assigned to the listOfResturants variable, which causes the component to 
    re-render with the updated list of restaurants.

    onclick is used to trigger the onClick event and the filter function is called when the button is clicked. 
     The filter function modifies the state of the component, causing it to re-render with the updated list






    HOOKS 
    
    although till now we have only use normal js variable but hooks are a powerful feature in react that allows us to use state and other React features inside functional components.
    Hooks are a new addition to React 16.8 and they let you use state and other React features inside functional components.
    
    Here are the main types of hooks in React:
    - useState: This hook allows you to add state to functional components.
    - useEffect: This hook allows you to perform side effects in functional components.

    Hooks are a great way to simplify your code and make it more readable. They also help you write more efficient and maintainable code.

    now let's use useState hook to create a counter component:
    
    here how we import useState hook from react:
    we call it like same {useState} from'react';
    import { useState } from'react';



    Normal javascript variable:
    let ListOfRestaurants = ['Pizza Hut', 'McDonald\'s', 'Burger King'];

    but in Hooks react using useState hook to create a state variable:
    const[listOfRestaurants] = useState();
    how we pass initial value as an argument to useState hook.
    const [listOfRestaurants] = useState(['Pizza Hut', 'McDonald\'s', 'Burger King']);

    now suppose in this project we made ListOfRestaurants as a state variable and we want to add a new restaurant:
    const [listOfRestaurants, setListOfRestaurants] = useState(
        [
            {
            },
            {
            },
            {
            }
        ]
    );
    we have made like this;
    noow if i want to modify the list of restaurants i will use setListOfRestaurants like this:
    we can not normally add or remove items from an array directly in useState hook. Instead, we have to use the concat() or spread operator to create a new array with the added or removed item.
    we use function and that parameter with new argument:
    in this project if we want that if we want to 
    <button className="filter-btn" 
        onClick={() => 
           const filteredList= listOfResturants.filter((res)=>res.card.card.info.avgRating  > 4 )
           setListOfRestaurant(filteredList);
        }
        >Top Rated Resturants</button>
        
        now list updated according to filter and this will show on page also this will reset the ListOfRestaurant as setListOfRestaurant(filteredList);


IMP NOTED POINT:-Whenever a state variable update react rerender the component.


body
import RestaurantCard from "./Card.js";
import { useState, useEffect } from "react";
import restList from "../utils/mockdata.js";

const Body = () => {
  // useState variable
  const [listOfRestaurants, setListOfRestaurants] = useState(restList);

  // Fetch function
  const fetchData = async () => {
    const data = await fetch(
      "https://www.swiggy.com/dapi/restaurants/list/v5?lat=23.2505&lng=77.4065&collection=83631&tags=layout_CCS_Pizza&sortBy=&filters=&type=rcv2&offset=0&page_type=null"
    );

    const json = await data.json();
    console.log(json);

    setListOfRestaurants(json.data.cards)

  };

  // useEffect hook
  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="body">
      <div className="filter">
        <button
          className="filter-btn"
          onClick={() => {
            const filteredList = listOfRestaurants.filter(
              (res) => res.card?.card?.info?.avgRating > 4
            );
            setListOfRestaurants(filteredList);
          }}
        >
          Top Rated Restaurants
        </button>
      </div>

      <div className="res-container">
        {listOfRestaurants.map((restaurant) => (
          <RestaurantCard
            key={restaurant.card?.card?.info?.id}
            resData={restaurant.card?.card}
          />
        ))}
      </div>
    </div>
  );
};

export default Body;




card

import { CDN_URL } from "../utils/constants";

const RestaurantCard = (props) => {
  const { resData } = props;
  
  

  return (
    <div className="res-card">
      <img
        className="res-logo"
        alt="res-logo"
        src={
          "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/" +
          resData.info.cloudinaryImageId
        }
      />
      <h3>{resData.info.name}</h3>
      <h4>{resData.info.cuisines.join(", ")}</h4>
      <h4>{resData.info.avgRating} ‚≠ê</h4>
      <h4>{resData.info.costForTwo}</h4>
      <h4>{resData.info.sla.deliveryTime} minutes</h4>
    </div>
  );
};

export default RestaurantCard;

